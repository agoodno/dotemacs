#+STARTUP: overview

* General
** Auto revert just log files
So logs act like a real-time tail -f
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
#+END_SRC
* Look & Feel
** Bell preference
#+BEGIN_SRC emacs-lisp
  ;; Use default audible bell
  (setq visible-bell nil)

  ;; Use a visible bell instead of audible bell
  (setq visible-bell t)

  ;; Ignore bell usingn 'ignore function
  (setq ring-bell-function 'ignore)

  ;; Play a wav file on bell
  (setq ring-bell-function (lambda ()
                             (call-process "afplay" nil 0 nil
                                           "/Users/agoodnough/Dropbox/emacs-bell.mp3")))

  (setq ring-bell-function (lambda ()
                             (call-process "afplay" nil 0 nil
                                           "/Users/agoodnough/Dropbox/emacs-bell2.mp3")))

  ;; Doesn't work - sets whole screen blue
  (setq ring-bell-function (lambda ()
                             (set-face-background 'default "DodgerBlue")
                             (set-face-foreground 'default "black")))
#+END_SRC
* Functions
#+BEGIN_SRC emacs-lisp
  (defun init-dynamo-dbs ()
    (interactive)
    (init-dynamo-db 4567 "DynamoDBLocal-Dev")
    (init-dynamo-db 5678 "DynamoDBLocal-Test"))

  (defun init-dynamo-db (port buffer-name)
    (async-shell-command (format "java -Djava.library.path=/Users/agoodnough/opt/dynamodb_local/latest/DynamoDBLocal_lib -jar /Users/agoodnough/opt/dynamodb_local/latest/DynamoDBLocal.jar -dbPath /Users/agoodnough/opt/dynamodb_local/dbs/dev -port %d" port) buffer-name)
    (bury-buffer buffer-name))
#+END_SRC
* Development
** Ruby
#+BEGIN_SRC emacs-lisp
;; My bundler is at: /Users/agoodnough/.gem/ruby/2.1.1/bin/bundle
;; but the pacakge can't find it and expects it to on the path.
;; It's probably missing this setup from my .bashrc
;;  source '/usr/local/share/chruby/chruby.sh'
;;  source '/usr/local/share/chruby/auto.sh'
;; Otherwise, I could hack the bundler.el to set the path to bunlder
;; or allow setting it with a variable
;; (use-package bundler
;;   :ensure t
;;   :defer t)

;; (use-package robe
;;   :ensure t
;;   :init
;;   (progn (add-hook 'ruby-mode-hook 'robe-mode)
;;          (eval-after-load 'company '(push 'company-robe company-backends))))

;;(setq ruby-use-smie nil)
;;(setq ruby-align-to-stmt-keywords t)


;; (defun rails-console-in (dir name)
;;   "Opens a rails console in the specified directory with name"
;;                                         ;  (interactive "P")
;;   (let ((default-directory dir))
;;                                         ;        (buffer-name (if name name "Console")))
;;     (chruby-use-corresponding)
;;     (async-shell-command "bundle exec rails console" name)))

;;                                         ;(rails-console-in "/Users/agoodnough/src/customerservice/" "repl-customerservice")
;;                                         ;(rails-console-in "/Users/agoodnough/src/mar-api/" "repl-mar-api")

;; (defun rails-console (name)
;;   "Opens a rails console in the specified directory with name"
;;   (chruby-use-corresponding)
;;   (async-shell-command "bundle exec rails console" name))

;;                                         ;(rails-console "repl-customerservice")

;; (defun m-test-one-current-buffer ()
;;   "Runs test"
;;   (interactive)
;;   (let ((default-directory "/Users/agoodnough/src/customerservice/"))
;;     (chruby-use-corresponding)
;;     (async-shell-command (format "bundle exec m %s" buffer-file-name))))

;; (defun m-test-all-current-buffer ()
;;   "Runs test"
;;   (interactive)
;;   (let ((default-directory "/Users/agoodnough/src/customerservice/"))
;;     (chruby-use-corresponding)
;;     (async-shell-command "bundle exec rake test")))

;; (defun run-foreman ()
;;   "Run foreman in an async buffer."
;;   (interactive)
;;   (let ((default-directory "/Users/agoodnough/src/customerservice/"))
;;     (async-shell-command "foreman start" "*Foreman*")))

;; (defun bundle-command (cmd)
;;   "Run cmd in an async buffer."
;;   (let ((default-directory (git-project-root)))
;;     (chruby-use-corresponding)
;;     (setenv "AWS_DEFAULT_REGION" "us-east-1")
;;     (async-shell-command cmd "*Bundler*")))

;; (defun show-dir (dir)
;;   "Show the full path file name in the minibuffer."
;;   (message dir))

;; (defun git-project-root? (path)
;;   "Finds the git project root starting in path"
;;   (let ((git-dir (concat (file-name-as-directory path) ".git")))
;;     (show-dir git-dir)
;;     (f-exists? git-dir)))

;; (defun git-project-root ()
;;   (f-traverse-upwards 'git-project-root?))

;; (eval-after-load "ruby-mode"
;;   '(progn
;;      (define-key ruby-mode-map (kbd "C-c C-t") 'm-test-one-current-buffer)
;;      (define-key ruby-mode-map (kbd "C-c C-a") 'm-test-all-current-buffer)
;;      (define-key ruby-mode-map (kbd "C-c C-f") 'run-foreman)))
#+END_SRC
* Packages
** auto-complete ideas
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (require 'auto-complete-config)
    (setq ac-expand-on-auto-complete nil)
    (setq ac-auto-start nil)
    ; To get pop-ups with docs even if a word is uniquely completed
    (setq ac-dwim nil)
    ;; Use C-n/C-p to select candidate ONLY when completion menu is displayed
    (setq ac-use-menu-map t)
    ;; Default settings
    (define-key ac-menu-map "\C-n" 'ac-next)
    (define-key ac-menu-map "\C-p" 'ac-previous)
    ;; extra modes auto-complete must support
    (dolist (mode '(magit-log-edit-mode
                    log-edit-mode org-mode text-mode haml-mode
                    sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                    html-mode web-mode sh-mode smarty-mode clojure-mode
                    lisp-mode textile-mode markdown-mode tuareg-mode
                    js2-mode css-mode less-css-mode java-mode eclim-mode))
      (add-to-list 'ac-modes mode))
    :config
    (ac-config-default)
    (ac-set-trigger-key "TAB") ; AFTER input prefix, press TAB key ASAP
    (global-auto-complete-mode t))
#+END_SRC
